import jieba
import jieba.posseg as pseg
txt_file_name = './data/红楼梦.txt'
node_file_name = './data/红楼梦-人物节点.csv'
link_file_name = './data/红楼梦-人物连接.csv'
test = open(node_file_name, 'w')
test.close()
test = open(link_file_name, 'w')
test.close()
txt_file = open(txt_file_name, 'r', encoding='utf-8')
line_list = txt_file.readlines()
txt_file.close()
xingshi='王李张刘 陈杨黄吴　赵周徐孙　马朱胡林　郭高罗\
郑梁谢宋　唐许邓冯　韩曹曾彭　萧蔡潘田　董袁于余\
叶蒋杜苏　魏程吕丁　沈任姚卢　傅钟姜崔　谭廖范汪\
 陆金石戴　贾韦夏邱　方侯邹熊　孟秦白江　阎薛尹段\
 雷黎史龙　陶贺顾毛　郝龚邵万　钱严赖覃　洪武莫孔\
 汤向常温　康施文牛　樊葛邢　齐易乔伍　庞倪庄\
 聂章鲁岳　翟殷詹申　欧耿关兰　焦俞左柳　甘祝包宁\
 尚符舒阮　柯纪梅童　凌毕单季　裴霍涂成　苗谷盛曲\
 翁冉骆蓝　游靳　欧阳管柴蒙 鲍华喻祁　蒲滕屈\
 饶解牟艾　尤阳时穆　农司卓古　吉缪简车　项连芦麦\
 褚娄窦戚　岑景党宫　费卜冷晏　席卫米柏　宗瞿桂全\
 佟应臧闵　苟邬边卞　姬师和仇　栾隋商刁　沙荣巫寇\
 桑郎甄丛　仲虞敖巩　佘池查　麻苑迟邝　官封谈匡\
 鞠惠荆乐　冀郁胥南　班储原栗　燕楚鄢劳　谌奚皮粟\
 冼蔺楼盘　满闻位厉　伊仝区郜　海阚花权　强帅屠豆\
 朴盖练廉　禹井漆　巴丰支卿　国狄平计　索宣晋\
 初云　敬扈晁　芮都普阙　浦戈伏鹿　薄邸雍辜\
 羊阿乌　裘亓修邰　赫杭况　宿鲜印逯　隆茹战\
 慕危玉　亢嵇公哈　湛宾戎勾　茅利於呼　居揭干但\
 尉冶斯元　束檀衣信　展阴昝智　奉植衡　富尧闭'
l=[]
for i in xingshi:
    if i=='\u3000' or i==' ':
        continue
    else:
        l.append(i)
line_name_list = [] 
name_cnt_dict = {}  

ignore_list= ['那里', '银子',  '那边', '那些', '原来', '明儿', '连忙', '方才', '于是', '明白', '那个', '况且', '母亲',  '房中', '明日', '许多', '时候', '房里', '伏侍', '冷笑',  '和尚', '衣服', '原故', '商议', '那时','衣裳', '高兴', '来回',  '那日', '来说', '干净', '原是', '但是', '时常', '门上', '商量', '何必', '尚未', '何苦',  '那丫头', '门前', '门口', '那样', '荣府', '利害', '贾母因', '那婆子', '胡说', '富贵', '何不', '古人', '柳家', '文章', '王爷', '来看', '索性', '房子', '来往', '花儿',  '那么', '阿弥陀佛', '余者','公子','师父','巴不得','南边', '贾府', '何曾']

print('正在分段统计……')
print('已处理词数：')
progress = 0  
for line in line_list: 
    word_gen = pseg.cut(line) 
    line_name_list.append([])
    
    for one in word_gen:
        word = one.word
        flag = one.flag
        if word=='林姑娘':
            word='林黛玉'
        elif word=='那宝玉':
            word='贾宝玉'
        elif word=='尤氏道':
            word='尤氏'
        elif word in {'贾政道','贾政又','贾政听'}:
            word='贾政'
            
        elif word=='林妹妹':
            word='林黛玉'
        elif word in {'贾母王','贾母笑'}:
            word='贾母'
            
        if word[0] not in l:
            continue      
        if len(word)==1 or len(word)>=5:
         
            continue
        if word in ignore_list:
            continue
        
        
            
        if flag == 'nr': 
            line_name_list[-1].append(word)
            if word in name_cnt_dict.keys():
                name_cnt_dict[word] = name_cnt_dict[word] + 1
            else:
                name_cnt_dict[word] = 1
        
  
        progress = progress + 1
        progress_quo = int(progress/1000)
        progress_mod = progress % 1000
        if progress_mod == 0: 
            
            print('\r' + '-'*progress_quo + '> '\
                  + str(progress_quo) + '千', end='')
     
print()
print('基础数据处理完成')

relation_dict = {}

name_cnt_limit = 100  

for line_name in line_name_list:
    for name1 in line_name:
      
        if name1 in relation_dict.keys():
            pass 
        elif name_cnt_dict[name1] >= name_cnt_limit: 
            relation_dict[name1] = {} 
        else: 
            continue

        for name2 in line_name:
            if name2 == name1 or name_cnt_dict[name2] < name_cnt_limit:  

                continue
            
            if name2 in relation_dict[name1].keys():
                relation_dict[name1][name2] = relation_dict[name1][name2] + 1
            else:
                relation_dict[name1][name2] = 1

print('共现统计完成，仅统计出现次数达到' + str(name_cnt_limit) + '及以上的人物')

item_list = list(name_cnt_dict.items())
item_list.sort(key=lambda x:x[1],reverse=True)

node_file = open(node_file_name, 'w') 
node_file.write('Name,Weight\n')
node_cnt = 0 
for name,cnt in item_list: 
    if cnt >= name_cnt_limit: 
        node_file.write(name + ',' + str(cnt) + '\n')
        node_cnt = node_cnt + 1
node_file.close()
print('人物数量：' + str(node_cnt))
print('已写入文件：' + node_file_name)

link_cnt_limit = 10  
print('只导出数量达到' + str(link_cnt_limit) + '及以上的连接')

link_file = open(link_file_name, 'w')

link_file.write('Source,Target,Weight\n')
link_cnt = 0
for name1,link_dict in relation_dict.items():
    for name2,link in link_dict.items():
        if link >= link_cnt_limit: 
            link_file.write(name1 + ',' + name2 + ',' + str(link) + '\n')
            link_cnt = link_cnt + 1
link_file.close()
print('连接数量：' + str(link_cnt))
print('已写入文件：' + link_file_name)      
from pyecharts import options as opts
from pyecharts.charts import Graph

node_file_name = './data/红楼梦-人物节点.csv' 
link_file_name = './data/红楼梦-人物连接.csv'

out_file_name = './output/关系图-分类-红楼梦人物.html'

node_file = open(node_file_name, 'r')
node_line_list = node_file.readlines()
node_file.close()
del node_line_list[0] 

link_file = open(link_file_name, 'r')
link_line_list = link_file.readlines()
link_file.close()
del link_line_list[0]  



node_in_graph = []
for one_line in node_line_list:
    one_line = one_line.strip('\n')
    one_line_list = one_line.split(',')
  
    node_in_graph.append(opts.GraphNode(
            name=one_line_list[0], 
            value=int(one_line_list[1]), 
            symbol_size=int(one_line_list[1])/20, 
            ) ) 

link_in_graph = []
for one_line in link_line_list:
    one_line = one_line.strip('\n')
    one_line_list = one_line.split(',')

    link_in_graph.append(opts.GraphLink(
            source=one_line_list[0], 
            target=one_line_list[1], 
            value=int(one_line_list[2])))



c = Graph()
c.add("", 
      node_in_graph, 
      link_in_graph, 
      edge_length=[10,50], 
      repulsion=5000,
   
      layout="force",  # "force"-力引导布局，"circular"-环形布局
      )
c.set_global_opts(title_opts=opts.TitleOpts(title="关系图-红楼梦人物-分类"))
c.render(out_file_name)